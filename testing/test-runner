#!/usr/bin/env bash

local SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

. "$SCRIPT_DIR/logging"


function camelToUnderScore(){
  echo $1 | sed -r 's/([a-z0-9])([A-Z])/\1_\L\2/g'
}

function toUppercase(){
  printf '%s\n' "$1" | awk '{ print toupper($0) }'
}


function runTests(){
    if [ $# -eq 0 ]; then
      echo "No tests scripts specified."
      return
    fi

    for testScript in "$@"
    do
      local testScriptRealpath=$(realpath "$testScript")
      local testScriptDir=$(dirname "$testScriptRealpath")
      local testScriptName=$(basename "$testScriptRealpath")
      local buildDir="${testScriptDir}/.build/tests/${testScriptName}"
      mkdir -p "${buildDir}"

      local beforeEachFn=$(listBeforeEach "$testScriptRealpath")
      local testFunctions=$(listTests "$testScriptRealpath")
      local afterEachFn=$(listAfterEach "$testScriptRealpath")


      if [ ! -z "$testFunctions" ]; then
        while read test; do
          function log(){
            local level=$1
            shift

            case "$level" in
              failed|error) logError "$(echo "$@" | sed -e "s/^/[$test] /")";;
              success|ok)  logSuccess "$(echo "$@" | sed -e "s/^/[$test] /")";;
              warn) logWarn "$(echo "$@" | sed -e "s/^/[$test] /")";;
              *) logInfo "$(echo "$level" "$@" | sed -e "s/^/[$test] /")";;
            esac
          }

          (
              log warn "Executing tests in '$testScript'"
              . "${SCRIPT_DIR}/test-utils"
              . "$testScript"

              cd "${testScriptDir}"

              executeBefore ${beforeEachFn} "${buildDir}" testDir

              executeTest "${buildDir}" "${testDir}" "$test"
              local exitCode=$?

              if [[ ! -z "${afterEachFn}" ]]; then
                log warn "${afterEachFn}"
                ${afterEachFn} "${buildDir}" "${testDir}"
              fi

              if [ $exitCode != 0 ]; then
                exit $exitCode
              fi
          )
          local exitCode=$?
          if [ $exitCode != 0 ]; then
            log failed "TEST FAILED $testScript::$test"
            exit $exitCode
          else
            log success "TEST SUCCESSFUL"
          fi
        done <<< "$testFunctions"
      else
        logError "No tests found in $testScript"
      fi
    done
}

function executeBefore(){
  local beforeEachFn="$1"
  local buildDir="$2"
  local returnVarName="$3"
  local _testDir="$buildDir"



  if [[ ! -z "${beforeEachFn}" ]]; then
    log warn "${beforeEachFn}"

    # get current setTestDir function
    local oldFunc=$(type setTestDir 2> /dev/null | sed '1d')

    function setTestDir() {
        printf -v "_testDir" "$1"
    }

    $beforeEachFn "${buildDir}"

    # restore oldFunction
    if [ -z "$oldFunc" ]; then
      unset setTestDir
    else
      source /dev/stdin <<<"$(cat <<<$oldFunc)"
    fi

    printf -v "$returnVarName" "$_testDir"
  fi
}

function executeTest(){
   (
   local buildDirectory="$1"
   local testDirectory="$2"
   local testFn="$3"

    if [ -d "$testDirectory" ]; then
      cd "$testDirectory"
    fi

    log warn "Executing '$testFn' in $(pwd)"

    ${testFn} "${buildDirectory}"
   )
}

function listBeforeEach(){
  local testScript="$1"
  shift

  grep -v -x -f <(declare -F) <(. ${testScript}; declare -F) | cut  -c 12- | grep "^beforeEach"
}

function listAfterEach(){
  local testScript="$1"
  shift

  grep -v -x -f <(declare -F) <(. ${testScript}; declare -F) | cut  -c 12- | grep "^afterEach"
}

function listTests(){
  local testScript="$1"
  shift

  grep -v -x -f <(declare -F) <(. ${testScript}; declare -F) | cut  -c 12- | grep "^test"
}